<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="colButton.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAJCQAAAEACABYCgAAFgAAACgAAAAkAAAASAAAAAEACAAAAAAAEAUAAAAAAAAAAAAAAAEAAAAB
        AAD///8AJCQkACwsLAB0dHQAZmZmAISEhACRkZEAmpqaAIyMjACxsbEAwMDAAHNzcwC0tLQAqqqqAHBw
        cADr6+sAQ0NDADMzMwD4+PgAf39/AJ6engBOTk4AampqADs7OwDm5uYAKysrAB0dHQASEhIAXl5eACqP
        WwC6uroAlZaVANra2gDKysoA3t7eAM/PzwDL7N8AQEBAANLu5AAZGRkAJntMALXOvwC5r7QAXoFrAF+R
        dABIcFgAN2FIAKappgDd5OAARnlbAD1rUABMdV0AmpSZALKlrAB/eHwAVlZWADyxgwAlr3oAYqiOAOHx
        6gBAs4UAwbq9AHSRgABHhmIAkbqhAK/dygAgpW8AnN7EAB2SXADO39YAyLW+AJSfmQBNtosAW5d4AJWr
        oADG4NEAaIFzAB23fABkvZsAMKVwAFbOngA/uJEAmMivAB13QwBc1boAPKZ4AKXexwA1m2cAnrurAIx5
        gQA6k2UAT+C7AEbPpwBabmMAh8aoAHzGowBiuJAAf7SXAA1qNQC3yb4AT5RuADSEXwBxZGkAs8G7AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
</value>
  </data>
</root>